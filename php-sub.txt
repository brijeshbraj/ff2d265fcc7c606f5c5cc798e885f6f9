What’s the difference between the include() and require() functions?
	Both functions are identical to each other, except that it handles errors differently. If an error occurs, the include() function generates a warning, but the script will continue execution. The require() generates a fatal error, and the script will stop.
	
What is the output of the following code:
<?php
	$a = '1';
	$b = &$a;
	$b = "2$b";
	echo $a.", ".$b;
?>
Ans - 21, 21

What are the main error types in PHP and how do they differ?
	Basically there are four types of errors in PHP, which are as follows:
	
	Parse Errors (syntax errors) - The parse error occurs if there is a syntax mistake in the script; the output is Parse errors. A parse error stops the execution of the script. There are many reasons for the occurrence of parse errors in PHP. The common reasons for parse errors are as follows:
		Common reason of syntax errors are:
			Unclosed quotes
			Missing or Extra parentheses
			Unclosed braces
			Missing semicolon
	
	Fatal Errors - Fatal errors are caused when PHP understands what you’ve written, however what you’re asking it to do can’t be done. Fatal errors stop the execution of the script. If you are trying to access the undefined functions, then the output is a fatal error.
	
	Warning Errors - Warning errors will not stop execution of the script. The main reason for warning errors are to include a missing file or using the incorrect number of parameters in a function.
	
	Notice Errors - Notice that an error is the same as a warning error i.e. in the notice error execution of the script does not stop. Notice that the error occurs when you try to access the undefined variable, then produce a notice error.
